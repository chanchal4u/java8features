package java8.api.streams;

import java.util.function.IntSupplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// Objective of this class is to explain processing in Streams
// There are 3 parts of streams working/processing
// 1. create stream  2. process stream  3. consume the stream

public class Demo3 {

	public static void main(String[] args) {
		
		int[] num = { 2,4,6,8,9,7,3,4,5};
		// 1. Create the Stream
		IntStream.of(num) ;  // from array 
		IntStream.range(1,100) ;  //  1...100
		IntStream.rangeClosed(1, 100) ;   // 1...100
		IntStream.generate(IntSupplier()) ;   // from supplier
		
		//2. Process the Stream
		IntStream.of(num).distinct();  // distinct
		IntStream.of(num).sorted() ;  // sort
		IntStream.of(num).limit(3);   // get first 3
		IntStream.of(num).skip(3) ;   // skip first 3
		IntStream.of(num).filter(i -> i %2 == 0) ; // only even
		IntStream.of(num).map(i -> i*2) ;  // double each element
		IntStream.of(num).boxed() ;   // convert each number to Integer
		
		// 3. Consume the stream 
		IntStream.of(num).sum();  // sum
		IntStream.of(num).average() ;  // average
		IntStream.of(num).min() ; // min
		IntStream.of(num).max() ; // average
		IntStream.of(num).count() ; // count 
  		
		IntStream.range(1, 100).forEach(System.out:: println);  // print 1 to 99
		IntStream.range(1, 100).toArray() ;   // collect into an array
		IntStream.range(1, 100).boxed().collect(Collectors.toList()) ;  // collect into a list
		
		IntStream.of(num).anyMatch(i -> i%2 == 1) ;  // is any num odd 
		IntStream.of(num).allMatch(i -> i%2 == 1) ;  // are all num odd
		
	}

	private static IntSupplier IntSupplier() {
		// processing
		return null;
	}

}
