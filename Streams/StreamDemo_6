package java8.api.streams;

import java.util.IntSummaryStatistics;
import java.util.stream.IntStream;

public class Demo1 {

	public static void main(String[] args) {
		
		//find the minimum number in an array basic java
		int[] num = { 2,4,6,8,9,7,3,4,5};
		int min = Integer.MAX_VALUE ;
		for(int i = 0 ; i < num.length ; i++) {
			if(min > num[i]) {
				min = num[i] ;
			}
		}
		System.out.println("min is : " + min);
		
		// Now doing the same using Stream API of java8 
		//IntStream.of(num).min() ;  // this will not any return any value 
		int min_num = IntStream.of(num).min().getAsInt() ;  // we have use getAsInt() method to get the min number of array
		System.out.println("using getAsInt() - min is : " + min_num);
		
		// now this getAsInt() will throw a RuntimeException if element is not found
		// Inorder to avoid this, we must use ifPresent() instead of getAsInt() to check if int is present or not.
		
		IntStream.of(num).min().ifPresent(min_2 -> System.out.println("using ifPresent() - min is : " +min_2));
		
		// now we use method reference in Lambda expression to print/process any value
		IntStream.of(num).min().ifPresent(System.out:: println);
		
		// Apart from min() method we have several other methods as well 
		int x = IntStream.of(num).max().getAsInt() ;
		int y = IntStream.of(num).min().getAsInt() ;
		int z = IntStream.of(num).sum() ;
		double d = IntStream.of(num).average().getAsDouble() ;
		long p = IntStream.of(num).count() ;
		
		System.out.println("min is: " + x+ " max is :" + y+" sum is: " + z+ " average is : "+ d + " count is : "+ p);
		
		// But instead of calling IntStream.of() every time to get stream we can use differnt method to get all these data in one go
		// Using IntSummaryStatistics and method summaryStatistics()
		
		IntSummaryStatistics summary = IntStream.of(num).summaryStatistics() ;
		System.out.println(summary.getCount() + " : "+ summary.getMax() + " : " + summary.getMin() + " : " + summary.getSum() + " : "+ 		summary.getAverage());
		
		
	}
}
